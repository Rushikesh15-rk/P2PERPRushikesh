<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GRN Dashboard</title>
    <!--
      GRN Dashboard - Main View
      This dashboard displays Key Performance Indicators (KPIs), charts, and recent GRN records.
      Features include date filtering, modal views for detailed data, and export functionality.
    -->



    <style>

        .modal-backdrop {
            display: none;
        }

        body.modal-open .main-content {
            position: relative;
        }

            body.modal-open .main-content::after {
                content: '';
                position: fixed;
                inset: 0;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1040;
                pointer-events: none;
            }

        .modal {
            z-index: 1055 !important;
        }

       
    </style>

</head>
<body>
    <div class="container-fluid py-4 main-content">
        <!--
          MAIN DASHBOARD CONTAINER
          Contains all dashboard components including KPIs, charts, and data tables
        -->
        <!-- FLOATING DATE FILTER BUTTON -->
        <button id="dateFilterBtn"
                class="btn btn-primary rounded-circle shadow-lg position-fixed"
                style="top: 70px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
            <i class="bi bi-calendar-date fs-4"></i>
            <!--
              This floating button triggers the date range picker for filtering dashboard data
              Positioned fixed for easy access from anywhere on the page
            -->
        </button>

        <!-- KPI CARDS SECTION -->
        <div class="row g-4 mb-4">
            <!--
              KPI CARDS - Display key metrics with click functionality to view details
              Each card shows a count and has a click handler to open modal with detailed data
            -->
            <!-- Total GRNs Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="TotalCountCard" style="cursor:pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Total GRNs</h5>
                                <h2 id="TotalGRNCount">0</h2>
                            </div>
                            <div class="bg-white rounded-circle p-3 opacity-25">
                                <i class="fas fa-clipboard-list fa-2x text-primary"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75">All time GRN count</p>
                    </div>
                </div>
            </div>

            <!-- Total GRN Items Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="GRNItemsCountCard" style="cursor:pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Total GRN Items</h5>
                                <h2 id="TotalGRNItemCount">0</h2>
                            </div>
                            <div class="bg-white rounded-circle p-3 opacity-25">
                                <i class="fas fa-boxes fa-2x text-success"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75">All received items</p>
                    </div>
                </div>
            </div>

            <!-- QC Assigned Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="QCCountCard" style="cursor:pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">QC Assigned</h5>
                                <h2 id="QCAssignedCount">0</h2>
                            </div>
                            <div class="bg-white rounded-circle p-3 opacity-25">
                                <i class="fas fa-clipboard-check fa-2x text-warning"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75">Items for quality check</p>
                    </div>
                </div>
            </div>

            <!-- Upcoming Items Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="UpcomingItemCard" style="cursor:pointer;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Upcoming Items</h5>
                                <h2 id="UpcomingItemCount">0</h2>
                            </div>
                            <div class="bg-white rounded-circle p-3 opacity-25">
                                <i class="fas fa-hourglass-half fa-2x text-info"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75">Upcoming Items from PO</p>
                    </div>
                </div>
            </div>
        </div>
        <!-- END KPI CARDS SECTION -->
        <!-- CHARTS SECTION -->
        <div class="row">
            <!-- Status Chart (Pie Chart) -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div id="statusChart" style="height: 500px;"></div>
                        <!--
                          Pie chart displaying quality check status distribution
                          Shows approved, rejected, and pending items with click functionality
                        -->
                    </div>
                </div>
            </div>

            <!-- Trend Chart (Line Chart) -->
            <div class="col-lg-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="mb-3"><i class="fas fa-chart-line me-2"></i>GRN Trends</h5>
                        <div id="trendChart" style="height: 350px;"></div>
                        <!--
                          Line chart showing GRN trends over time
                          Displays number of GRNs by date within the selected date range
                        -->
                    </div>
                </div>
            </div>
        </div>
        <!-- END CHARTS SECTION -->
        <!-- RECENT GRNs TABLE SECTION -->
        <div class="card mt-4 shadow-sm">
            <div class="card-header py-3">
                <h5 class="mb-0"><i class="fas fa-history me-2 text-primary"></i>Recent GRNs</h5>
            </div>

            <div class="card-body">
                <div class="table-responsive">
                    <!-- TABLE HEADER WITH FILTERS AND EXPORT BUTTONS -->
                    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
                        <!-- Date Range Filter -->
                        <div class="input-group" style="height: 40px; max-width: 280px;">
                            <span class="input-group-text bg-primary text-white" style="height: 100%;">
                                <i class="bi bi-calendar-date"></i>
                            </span>
                            <input type="text" id="reportrange" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                            <!--
                              Date range input for filtering the recent GRNs table
                              Uses daterangepicker plugin for selection
                            -->
                        </div>

                        <!-- Export Buttons Container -->
                        <div class="d-flex align-items-center gap-3 ms-auto">
                            <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;">
                                <!--
                                  DataTable export buttons will be injected here
                                  Includes Print, PDF, Excel, and CSV export options
                                -->
                            </div>
                        </div>
                    </div>

                    <!-- RECENT GRNs DATA TABLE -->
                    <table id="reqTable" class="table table-hover align-middle" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th><input type="checkbox" id="selectAll"></th>
                                <!-- Select all checkbox for batch operations -->
                                <th>#</th>
                                <th>GRN Code</th>
                                <th>PO Code</th>
                                <th>Vendor</th>
                                <th>Invoice No</th>
                                
                                <th>Added By</th>
                                <th>Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="tblRecent">
                            <tr>
                                <td colspan="9" class="text-center">
                                    <div class="spinner-container">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                    <!-- Loading spinner displayed while table data is being fetched -->
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- END RECENT GRNs TABLE SECTION -->

    </div>
    <!-- END container-fluid -->


    <!-- REUSABLE MODAL FOR DETAILED VIEWS -->
    <div class="modal fade" id="itemsModal" data-bs-backdrop="false" tabindex="-1" aria-labelledby="itemsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">

                <div class="modal-header bg-primary text-white position-relative">
                    <div class="w-100 text-center">
                        <h5 class="modal-title text-white fw-bold mb-0" id="itemsModalLabel">Details</h5>
                    </div>

                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body" id="modalContent">
                    <div class="spinner-container text-center">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>
                    <!--
                      Modal content area - dynamically loaded with partial views
                      Shows detailed information when KPI cards or chart segments are clicked
                    -->
                </div>
            </div>
        </div>
    </div>


    <!-- END REUSABLE MODAL -->
    <!-- JAVASCRIPT SECTION -->
    <script>
        // GLOBAL VARIABLES
        let dataTable;          // DataTable instance for the recent GRNs table
        let selectedStartDate = ''; // Start date for filtering
        let selectedEndDate = '';   // End date for filtering
        let statusChart, trendChart; // Highcharts chart instances
        let tableStartDate = null; // Start date for table filtering
        let tableEndDate = null;   // End date for table filtering







        // DOCUMENT READY FUNCTION - Initializes the dashboard when page is loaded
        $(document).ready(function () {

            
            // Initialize date range picker for the floating button
            initDateRangePicker();

            // Set up click event handlers for KPI cards
            $("#TotalCountCard").click(() => openModalWithPartial("/GRN/GetGRNListPartialRHK", "All GRNs"));
            $("#GRNItemsCountCard").click(() => openModalWithPartial("/GRN/GetGRNItemsPartialRHK", "GRN Items"));
            $("#QCCountCard").click(() => openModalWithPartial("/GRN/GetQCListPartialRHK", "QC Assigned Items"));
            $("#UpcomingItemCard").click(() => openModalWithPartial("/GRN/GetUpcomingItemPartialRHK", "Upcoming Items"));
            // Load initial data
            loadRecentGRNs(selectedStartDate, selectedEndDate);
        });



        function initDateRangePicker1() {
            $('#reportrange').daterangepicker({
                autoUpdateInput: false,
                locale: {
                    cancelLabel: 'Clear',
                    format: 'YYYY-MM-DD'
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });

            // Apply date range when user selects
            $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                tableStartDate = picker.startDate;
                tableEndDate = picker.endDate;
                $(this).val(tableStartDate.format('YYYY-MM-DD') + ' - ' + tableEndDate.format('YYYY-MM-DD'));

                // Filter the table based on date range
                filterTableByDate();
            });

            // Clear date range on cancel
            $('#reportrange').on('cancel.daterangepicker', function (ev, picker) {
                tableStartDate = null;
                tableEndDate = null;
                $(this).val('');
                dataTable.draw(); // Reset filtering
            });
        }

        function filterTableByDate() {
            if (tableStartDate && tableEndDate) {
                // Custom filtering function for date range
                $.fn.dataTable.ext.search.push(
                    function (settings, data, dataIndex) {
                        var date = moment(data[8], 'YYYY-MM-DD'); // Assuming date is in 4th column (index 3)

                        if ((tableStartDate === null && tableEndDate === null) ||
                            (tableStartDate === null && date <= tableEndDate) ||
                            (tableStartDate <= date && tableEndDate === null) ||
                            (tableStartDate <= date && date <= tableEndDate)) {
                            return true;
                        }
                        return false;
                    }
                );
            }

            dataTable.draw();

            // Remove the custom filter function after drawing
            $.fn.dataTable.ext.search.pop();
        }





        // INITIALIZE DATE RANGE PICKER FOR DASHBOARD FILTERING
        function initDateRangePicker() {
            const start = moment().startOf('year'); // Default: last 7 days
            const end = moment().endOf('year');

            // Update dashboard with selected date range
            function updateDashboard(start, end) {
                selectedStartDate = start.format('YYYY-MM-DD');
                selectedEndDate = end.format('YYYY-MM-DD');

                // Update the display
                $('#dateFilterBtn span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                $('#selectedRangeBadge').text(start.format('MMM D') + ' - ' + end.format('MMM D'));

                // Refresh all dashboard components with new date range
                loadKPIData(selectedStartDate, selectedEndDate);
                loadStatusData(selectedStartDate, selectedEndDate);
                loadTrendData(selectedStartDate, selectedEndDate);
                loadRecentGRNs(selectedStartDate, selectedEndDate);
            }



            // Initialize the date range picker on floating button
            $('#dateFilterBtn').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                    'This Year': [moment().startOf('year'), moment().endOf('year')]

                },
                alwaysShowCalendars: true,
                autoApply: false
            }, function (start, end) {
                updateDashboard(start, end);
            });

            // Trigger initial load with default date range
            updateDashboard(start, end);
        }






        // LOAD KPI DATA WITH DATE PARAMETERS
        function loadKPIData(startDate, endDate) {
            // Show loading states
            $("#TotalGRNCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#TotalGRNItemCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#QCAssignedCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#UpcomingItemCount").html('<span class="spinner-border spinner-border-sm"></span>');

            // Load each KPI with date parameters
            $.getJSON("/GRN/GetTotalGRNRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#TotalGRNCount").text(data.count || 0);
            }).fail(function () {
                $("#TotalGRNCount").text("Error");
            });

            $.getJSON("/GRN/GetTotalGRNItemRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#TotalGRNItemCount").text(data.count || 0);
            }).fail(function () {
                $("#TotalGRNItemCount").text("Error");
            });

            $.getJSON("/GRN/GetQCAssignedCountRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#QCAssignedCount").text(data.count || 0);
            }).fail(function () {
                $("#QCAssignedCount").text("Error");
            });

            $.getJSON("/GRN/GetUpcomingItemCountRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#UpcomingItemCount").text(data.count || 0);
            }).fail(function () {
                $("#UpcomingItemCount").text("Error");
            });
        }





        // LOAD STATUS DATA FOR PIE CHART
        function loadStatusData(startDate, endDate) {
            // Fetch approved and rejected counts, then calculate pending count
            $.getJSON("/GRN/GetApproveCountRHK", { startDate: startDate, endDate: endDate }, function (res1) {
                $.getJSON("/GRN/GetRejectedGRNCountRHK", { startDate: startDate, endDate: endDate }, function (res2) {
                    const approvedCount = res1.count || 0;
                    const rejectedCount = res2.count || 0;
                    const qcAssignedCount = parseInt($("#QCAssignedCount").text()) || 0;
                    const pendingCount = qcAssignedCount - approvedCount - rejectedCount;

                    createStatusChart(approvedCount, rejectedCount, Math.max(0, pendingCount));
                }).fail(function () {
                    createStatusChart(0, 0, 0);
                });
            }).fail(function () {
                createStatusChart(0, 0, 0);
            });
        }



        // CREATE STATUS CHART (PIE CHART)
        function createStatusChart(approvedCount, rejectedCount, pendingCount) {
            // Destroy existing chart instance if it exists
            if (statusChart) {
                statusChart.destroy();
            }

            // Create new Highcharts pie chart
            statusChart = Highcharts.chart('statusChart', {
                chart: {
                    type: 'pie',
                    backgroundColor: 'transparent'
                },
                title: {
                    text: 'Quality Check Status',
                    style: { fontWeight: '600', fontSize: '16px' }
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}',
                            style: { fontWeight: '500' }
                        },
                        colors: ['#28a745', '#dc3545', '#ffc107'] // Green, Red, Yellow
                    }
                },
                series: [{
                    name: 'Items',
                    colorByPoint: true,
                    data: [
                        { name: 'Confirmed', y: approvedCount },
                        { name: 'Non-Confirmed', y: rejectedCount },
                        { name: 'Pending', y: pendingCount }
                    ],
                    point: {
                        events: {
                            click: function () {
                                // Open appropriate modal based on clicked segment
                                if (this.name === "Confirmed") {
                                    openModalWithPartial("/GRN/GetApprovedItemsPartialRHK", "Approved Items");
                                } else if (this.name === "Non-Confirmed") {
                                    openModalWithPartial("/GRN/GetRejectedItemsPartialRHK", "Rejected Items");
                                } else {
                                    openModalWithPartial("/GRN/GetQCListPartialRHK", "QC Assigned Items");
                                }
                            }
                        }
                    }
                }],
                credits: { enabled: false }
            });
        }



        // LOAD TREND DATA WITH DATE RANGE
        function loadTrendData(startDate, endDate) {
            $.getJSON("/GRN/GetGRNTrendsRHK", { startdate: startDate, enddate: endDate }, function (res) {
                // Destroy existing chart if it exists
                if (trendChart) {
                    trendChart.destroy();
                }

                // Create new Highcharts line chart
                trendChart = Highcharts.chart('trendChart', {
                    chart: {
                        type: 'line',
                        backgroundColor: 'transparent'
                    },
                    title: {
                        text: 'GRN Trends',
                        style: { fontWeight: '600', fontSize: '16px' }
                    },
                    xAxis: {
                        categories: res.dates,
                        title: { text: 'Date' }
                    },
                    yAxis: {
                        title: { text: 'Number of GRNs' },
                        min: 0
                    },
                    series: [{
                        name: 'GRNs',
                        data: res.counts,
                        color: '#4361ee',
                        lineWidth: 3,
                        marker: {
                            radius: 5,
                            fillColor: '#ffffff',
                            lineWidth: 2,
                            lineColor: '#4361ee'
                        }
                    }],
                    credits: { enabled: false }
                });
            }).fail(function () {
                // Handle error case by creating empty chart
                if (trendChart) {
                    trendChart.destroy();
                }

                trendChart = Highcharts.chart('trendChart', {
                    chart: { type: 'line' },
                    title: { text: 'GRN Trends' },
                    series: [{ name: 'GRNs', data: [] }],
                    credits: { enabled: false }
                });
            });
        }



        // LOAD RECENT GRNs WITH DATE FILTERING


        function loadRecentGRNs(startDate, endDate) {
            $('#tableSpinner').removeClass('d-none');

            // AJAX call to fetch recent GRN data
            $.ajax({
                url: "/GRN/RecentGRNListRHK",
                success: function (response) {
                    console.log(response); // Debugging output

                    $('#tblRecent').empty();

                    if (response.data?.length > 0) {
                        let i = 1;
                        // Populate table with received data
                        response.data.forEach((d) => {

                           

                            $('#tblRecent').append(`
                            <tr>
                                <td><input type="checkbox" class="row-select" value="${d.GRNCode}"></td>
                                <td>${i}</td>
                                <td>${d.GRNCode || 'N/A'}</td>
                                <td>${d.POCode || 'N/A'}</td>
                                <td>${d.Vendor || 'N/A'}</td>
                                <td>${d.InvoiceNo || 'N/A'}</td>
                                <td>${d.AddedBy || 'N/A'}</td>
                               <td>${moment(d.AddedDate).format('DD/MM/YYYY')}</td>
                                
                            </tr>
                        `);
                            i++; // Increment counter after using it
                        });
                    } else {
                        $('#tblRecent').html('<tr><td colspan="9" class="text-center py-4">No recent GRNs</td></tr>');
                    }

                    // Initialize DataTable and date picker for table filtering
                    initDataTable();
                    initDateRangePicker1();
                    $('#tableSpinner').addClass('d-none'); // Hide spinner after load
                },
                error: function () {
                    $('#tblRecent').html('<tr><td colspan="9" class="text-center py-4 text-danger">Error loading data</td></tr>');
                    $('#tableSpinner').addClass('d-none');
                }
            });
        }

        // HELPER FUNCTION TO GET BADGE COLOR BASED ON STATUS
        function getStatusBadgeColor(status) {
            switch (status?.toLowerCase()) {
                case 'approved': return 'success';
                case 'rejected': return 'danger';
                case 'pending': return 'warning';
                default: return 'secondary';
            }
        }

        // INITIALIZE DATATABLE FOR RECENT GRNs TABLE
        function initDataTable() {
            // Destroy existing DataTable instance if it exists
            if (dataTable) {
                dataTable.destroy();
            }

            // Initialize DataTable with configuration
            dataTable = $('#reqTable').DataTable({
                pageLength: 10,
                paging: true,
                ordering: true,
                searching: true,
                dom: '<"d-flex justify-content-between mb-2"Bf>rtip',
                buttons: [
                    {
                        extend: 'print',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        className: 'btn btn-sm btn-outline-dark',
                        exportOptions: { rows: exportSelectedRows },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        className: 'btn btn-sm btn-outline-danger',
                        exportOptions: { rows: exportSelectedRows },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'excel',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: { rows: exportSelectedRows },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: { rows: exportSelectedRows },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        }
                    }
                ]

            });



            // SELECT ALL TOGGLE FUNCTIONALITY
            $('#selectAll').off('change').on('change', function () {
                $('.row-select').prop('checked', $(this).prop('checked'));
            });

            // UPDATE SELECT ALL CHECKBOX WHEN INDIVIDUAL CHECKBOXES CHANGE
            $('#reqTable').off('change', '.row-select').on('change', '.row-select', function () {
                let total = $('.row-select').length;
                let checked = $('.row-select:checked').length;
                $('#selectAll').prop('checked', total === checked);
            });
        }




        // HELPER: EXPORT ONLY SELECTED ROWS
        function exportSelectedRows(idx, data, node) {
            // Get all selected GRN codes
            let selected = $('.row-select:checked').map(function () {
                return this.value;
            }).get();

            // Return false if no rows are selected (nothing to export)
            if (selected.length === 0) {
                return false;
            }

            // Check if current row should be included in export
            // GRN Code is in column index 2
            return selected.includes(data[1]);
        }



        // OPEN MODAL WITH PARTIAL VIEW
        function openModalWithPartial(url, title) {
            $("#itemsModal").modal("show");
            $("#itemsModalLabel").text(title);
            $("#modalContent").html('<div class="spinner-container"><div class="spinner-border text-primary"></div></div>');

            // Pass date range to partial views
            const fullUrl = `${url}?startDate=${selectedStartDate}&endDate=${selectedEndDate}`;

            // Load partial view content
            $.get(fullUrl, function (html) {
                $("#modalContent").html(html);

                // Initialize DataTable in modal if present
                if ($(".datatable1").length) {
                    $(".datatable1").DataTable({
                        dom: '<"d-flex justify-content-between mb-2"Bf>rtip',
                        buttons: [
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                className: 'btn btn-sm btn-outline-dark',
                                exportOptions: { rows: exportSelectedRows },
                                action: function (e, dt, button, config) {
                                    if ($('.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                }
                            },
                            {
                                extend: 'pdf',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                className: 'btn btn-sm btn-outline-danger',
                                exportOptions: { rows: exportSelectedRows },
                                action: function (e, dt, button, config) {
                                    if ($('.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                }
                            },
                            {
                                extend: 'excel',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                className: 'btn btn-sm btn-outline-success',
                                exportOptions: { rows: exportSelectedRows },
                                action: function (e, dt, button, config) {
                                    if ($('.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                }
                            },
                            {
                                extend: 'csv',
                                text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                                className: 'btn btn-sm btn-outline-success',
                                exportOptions: { rows: exportSelectedRows },
                                action: function (e, dt, button, config) {
                                    if ($('.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                }
                            }
                        ],
                        destroy: true,
                        responsive: true
                    });

                    // Set up select all functionality in modal table
                    $('#selectAll').off('change').on('change', function () {
                        $('.row-select').prop('checked', $(this).prop('checked'));
                    });

                    // Update select all checkbox when individual checkboxes change
                    $('#reqTable').off('change', '.row-select').on('change', '.row-select', function () {
                        let total = $('.row-select').length;
                        let checked = $('.row-select:checked').length;
                        $('#selectAll').prop('checked', total === checked);
                    });
                }
            }).fail(function () {
                // Handle error case
                $("#modalContent").html(
                    '<div class="alert alert-danger text-center mt-3">Failed to load data. Please try again.</div>'
                );
            });



        }

        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }


    </script>
</body>
</html>